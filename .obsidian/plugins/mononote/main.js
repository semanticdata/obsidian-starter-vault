/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Mononote
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/plugin-info.ts
var PLUGIN_INFO = {
  "pluginVersion": "1.1.1",
  "pluginReleasedAt": "2024-01-09T15:32:07+0100"
};

// src/main.ts
var Mononote = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.onActiveLeafChange = (activeLeaf) => {
      setTimeout(() => this.handleActiveLeafChange(activeLeaf), 100);
    };
    this.handleActiveLeafChange = async (activeLeaf) => {
      const { workspace } = this.app;
      const filePath = activeLeaf == null ? void 0 : activeLeaf.view.getState().file;
      if (!filePath)
        return;
      const viewType = activeLeaf == null ? void 0 : activeLeaf.view.getViewType();
      const isActiveLeafPinned = activeLeaf.pinned;
      const duplicateLeaves = workspace.getLeavesOfType(viewType).filter(
        (l) => {
          var _a;
          return l.parent.id === activeLeaf.parent.id && ((_a = l.view) == null ? void 0 : _a.getState().file) === filePath;
        }
      ).sort((l1, l2) => {
        if (l1.activeTime === 0)
          return 1;
        if (l2.activeTime === 0)
          return -1;
        return l1.activeTime - l2.activeTime;
      });
      let unpinnedDupes = duplicateLeaves.filter((l) => !l.pinned);
      let pinnedDupes = duplicateLeaves.filter((l) => l.pinned);
      const ephemeralState = activeLeaf.getEphemeralState();
      const hasEphemeralState = Object.keys(ephemeralState).length > 0;
      if (pinnedDupes.length) {
        if (isActiveLeafPinned) {
          unpinnedDupes.forEach((l) => l.detach());
          return;
        }
        const newActiveLeaf2 = pinnedDupes[0];
        if (hasEphemeralState)
          newActiveLeaf2.setEphemeralState(ephemeralState);
        workspace.setActiveLeaf(newActiveLeaf2, { focus: true });
        return;
      }
      const newActiveLeaf = unpinnedDupes.shift();
      unpinnedDupes.forEach((l) => l.detach());
      if (hasEphemeralState)
        newActiveLeaf.setEphemeralState(ephemeralState);
      workspace.setActiveLeaf(newActiveLeaf, { focus: true });
    };
  }
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", this.onActiveLeafChange)
      );
      console.log(`Plugin Mononote v${PLUGIN_INFO.pluginVersion} initialized`);
    });
  }
  onunload() {
    console.log(`Plugin Mononote v${PLUGIN_INFO.pluginVersion} unloaded`);
  }
};
